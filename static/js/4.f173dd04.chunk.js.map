{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialogs","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogsElements","map","dialog","messagesElements","messages","newMessageBody","isAuth","dialogsItems","values","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCUnKC,EAPI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,qBAAKC,UAAWC,IAAEC,QAAU,IAAMD,IAAEE,OAApC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCCnBC,EAJC,SAACT,GACb,OAAO,qBAAKG,UAAWC,IAAEC,QAAlB,SAA4BL,EAAMU,W,yCC+BvCC,EAAcC,YAAiB,IAmB/BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAlBL,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,YAAY,qBACZC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,GACrBH,KAAK,qBAGb,8BACI,kDAWDgB,EAlDC,SAACxB,GACb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMpB,QAAQuB,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAOrB,KAAsBN,GAAI2B,EAAO3B,IAAtB2B,EAAO3B,OACzF4B,EAAmBL,EAAMM,SAASH,KAAI,SAAAlB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQR,OAChFuB,EAAMO,eAM3B,OAAKhC,EAAMiC,OAGP,sBAAK9B,UAAWC,IAAEC,QAAlB,UACI,qBAAKF,UAAWC,IAAE8B,aAAlB,SACKP,IAEL,qBAAKxB,UAAWC,IAAE2B,SAAlB,SACI,8BAAMD,MAEV,cAACjB,EAAD,CAAqBG,SAdT,SAACmB,GACjBnC,EAAMoC,YAAYD,EAAOH,sBAGH,cAAC,IAAD,CAAUzB,GAAI,Y,+CCjBxC8B,EAA6B,SAACZ,GAAD,MAAY,CACzCQ,OAAQR,EAAMa,KAAKL,S,OCiBRM,sBACXC,aAfkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACe,GACtB,MAAO,CACHL,YAAa,SAACJ,GACVS,EAASC,YAAmBV,UDTR,SAACW,GAAe,IAGtCC,EAHqC,uKAKnC,OAAKC,KAAK7C,MAAMiC,OAET,cAACU,EAAD,eAAeE,KAAK7C,QAFI,cAAC,IAAD,CAAUO,GAAI,eALV,GAGXuC,IAAMH,WAWtC,OAFqCH,YAAQH,EAARG,CAAoCI,KCE9DL,CAGbf","file":"static/js/4.f173dd04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__22tiY\",\"dialogsItems\":\"Dialogs_dialogsItems__10ojp\",\"active\":\"Dialogs_active__2qHY-\",\"messages\":\"Dialogs_messages__dfuwV\",\"message\":\"Dialogs_message__3FCQl\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div className={s.dialogs + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialogs}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\r\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id}/>);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='Enter your message'\r\n                    component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    name='newMessageBody'\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}